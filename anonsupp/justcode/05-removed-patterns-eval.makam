match : [NBefore NAfter]
  (Pattern: patt NBefore NAfter) (Scrutinee: term)
  (SubstBefore: vector term NBefore) (SubstAfter: vector term NAfter) ->
  prop.
eval (case_or_else Scrutinee Pattern Body Else) V' :-
  eval Scrutinee V,
  if (match Pattern V vnil Subst)
  then (vapplymany Body Subst Body', eval Body' V')
  else (eval Else V').

vapplymany : [N] vbindmany Var N Body -> vector Var N -> Body -> prop.
vapplymany (vbody Body) vnil Body.
vapplymany (vbind F) (vcons E ES) Body :- vapplymany (F E) ES Body.

match patt_var X Subst Subst' :- vsnoc Subst X Subst'.
match patt_wild X Subst Subst.
match patt_ozero ozero Subst Subst.
match (patt_osucc P) (osucc V) Subst Subst' :-
  match P V Subst Subst'.

matchlist : [NBefore NAfter]
  (Pattern: pattlist NBefore NAfter) (Scrutinee: list term)
  (SubstBefore: vector term NBefore) (SubstAfter: vector term NAfter) ->
  prop.
match (patt_tuple PS) (tuple VS) Subst Subst' :-
  matchlist PS VS Subst Subst'.

matchlist pnil [] Subst Subst.
matchlist (pcons P PS) (V :: VS) Subst Subst'' :-
  match P V Subst Subst', matchlist PS VS Subst' Subst''.

(eq _PRED (lam _ (fun n => case_or_else n
  (patt_osucc patt_var) (vbind (fun pred => vbody pred))
  ozero)),
 typeof _PRED T,
 eval (app _PRED ozero) PRED0, eval (app _PRED (osucc (osucc ozero))) PRED2) ?
>> Yes:
>> T := arrow onat onat, PRED0 := ozero, PRED2 := osucc ozero.

typeof (case_or_else (tuple [tuple [], ozero]) (patt_tuple (pcons patt_var (pcons patt_var pnil)))
                     (vbind (fun t => vbind (fun n => vbody (osucc n))))
                     ozero) T ?
>> Yes:
>> T := onat.

eval (case_or_else (osucc (osucc ozero))
     (patt_osucc patt_var) (vbind (fun pred => vbody pred))
     ozero)
  V ?
>> Yes:
>> V := osucc ozero.

