%use "07-structural".
tests: testsuite. %testsuite tests.

object, class, index : type.
classof : object -> class -> prop.
classof_index : index -> class -> prop.
subst_obj : (I_E: index -> term) (O: object) (E_OforI: term) -> prop.

liftobj : object -> term. liftclass : class -> typ.
typeof (liftobj O) (liftclass C) :- classof O C.

letobj : term -> (index -> term) -> term.
typeof (letobj E EF') T :-
  typeof E (liftclass C), (i:index -> classof_index i C -> typeof (EF' i) T).

eval (liftobj O) (liftobj O).
eval (letobj E I_E') V :-
  eval E (liftobj O), subst_obj I_E' O E', eval E' V.

%extend stlc.
term : type. typ : type.
typeof : term -> typ -> prop.

app : term -> term -> term.
lam : typ -> (term -> term) -> term.
arrow : typ -> typ -> typ.

typeof (app E1 E2) T' :- typeof E1 (arrow T T'), typeof E2 T.
typeof (lam T1 E) (arrow T1 T2) :- (x:term -> typeof x T1 -> typeof (E x) T2).

tuple : list term -> term. product : list typ -> typ.
typeof (tuple ES) (product TS) :- map typeof ES TS.

eval : term -> term -> prop.
eval (lam T F) (lam T F).
eval (tuple ES) (tuple VS) :- map eval ES VS.
eval (app E E') V'' :- eval E (lam _ F), eval E' V', eval (F V') V''.
%end.


%extend stlc.
onat : typ. ozero : term. osucc : term -> term.
typeof ozero onat.
typeof (osucc N) onat :- typeof N onat.
eval ozero ozero.
eval (osucc E) (osucc V) :- eval E V.

add : term -> term -> term.
mult : term -> term -> term.

typeof (add N1 N2) onat :- typeof N1 onat, typeof N2 onat.
typeof (mult N1 N2) onat :- typeof N1 onat, typeof N2 onat.

do_oadd : term -> term -> term -> prop.
do_oadd ozero N N.
do_oadd (osucc N) N' (osucc N'') :- do_oadd N N' N''.

do_omult : term -> term -> term -> prop.
do_omult ozero N ozero.
do_omult (osucc ozero) N N.
do_omult (osucc (osucc N)) N' N''' :-
 do_omult (osucc N) N' N'',
 do_oadd N' N'' N'''.

eval (add E1 E2) V :- eval E1 V1, eval E2 V2, do_oadd V1 V2 V.
eval (mult E1 E2) V :- eval E1 V1, eval E2 V2, do_omult V1 V2 V.

aq : index -> term.
%end.

obj_term : stlc.term -> object. cls_typ : stlc.typ -> class.
classof (obj_term E) (cls_typ T) :- stlc.typeof E T.
stlc.typeof (stlc.aq I) T :- classof_index I (cls_typ T).

typeof (letrec
  (bind (fun power => body ([
    lam onat (fun n =>
    case_or_else n
      (patt_ozero) 
        (* |-> *) (vbody (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.osucc stlc.ozero)))))
      (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.ozero))))
    )], power)))) T ?
>> Yes:
>> T := arrow onat (liftclass (cls_typ (stlc.arrow stlc.onat stlc.onat))).

typeof (letrec
  (bind (fun power => body ([
    lam onat (fun n =>
    case_or_else n
      (patt_ozero) 
        (* |-> *) (vbody (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.osucc stlc.ozero)))))
    (case_or_else n
      (patt_osucc patt_var)
        (* |-> *) (vbind (fun n' => vbody (
           letobj (app power n')
           (fun i =>
             liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.mult x (stlc.app (stlc.aq i) x))))))))
      (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.ozero))))
    )
    )], power)))) T ?
>> Yes:
>> T := arrow onat (liftclass (cls_typ (stlc.arrow stlc.onat stlc.onat))).

subst_obj_aux, subst_obj_cases : [Any]
  (Var: index) (Replacement: object) (Where: Any) (Result: Any) -> prop.
subst_obj I_Term O Term_OforI :-
  (i:index -> subst_obj_aux i O (I_Term i) Term_OforI).

subst_obj_aux Var Replacement Where Result :-
  if (subst_obj_cases Var Replacement Where Result)
  then success
  else (structural_recursion @(subst_obj_aux Var Replacement) Where Result).
subst_obj_cases Var (obj_term Replacement) (stlc.aq Var) Replacement.

eval (letrec
  (bind (fun power => body ([
    lam onat (fun n =>
    case_or_else n
      (patt_ozero) 
        (* |-> *) (vbody (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.osucc stlc.ozero)))))
    (case_or_else n
      (patt_osucc patt_var)
        (* |-> *) (vbind (fun n' => vbody (
           letobj (app power n')
           (fun i =>
             liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.mult x (stlc.app (stlc.aq i) x))))))))
      (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.ozero))))
    )
    )], app power (osucc (osucc ozero)))))) V ?
>> Yes:
>> V := liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.mult x (stlc.app (stlc.lam stlc.onat (fun a => stlc.mult a (stlc.app (stlc.lam stlc.onat (fun b => stlc.osucc stlc.ozero)) a))) x)))).

(eval (letrec
  (bind (fun power => body ([
    lam onat (fun n =>
    case_or_else n
      (patt_ozero) 
        (* |-> *) (vbody (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.osucc stlc.ozero)))))
    (case_or_else n
      (patt_osucc patt_var)
        (* |-> *) (vbind (fun n' => vbody (
           letobj (app power n')
           (fun i =>
             liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.mult x (stlc.app (stlc.aq i) x))))))))
      (liftobj (obj_term (stlc.lam stlc.onat (fun x => stlc.ozero))))
    )
    )], app power (osucc (osucc ozero))
    )))) (liftobj (obj_term _V)),
  stlc.eval (stlc.app _V (stlc.osucc (stlc.osucc stlc.ozero))) V') ?
>> Yes:
>> V' := stlc.osucc (stlc.osucc (stlc.osucc (stlc.osucc stlc.ozero))).

obj_openterm : bindmany stlc.term stlc.term -> object.
cls_ctxtyp : list stlc.typ -> stlc.typ -> class.

%extend stlc.
aqopen : index -> list term -> term.
typeof (aqopen I ES) T :-
  classof_index I (cls_ctxtyp TS T), map typeof ES TS.
%end.

classof (obj_openterm XS_E) (cls_ctxtyp TS T) :-
  openmany XS_E (fun xs e => 
    assumemany stlc.typeof xs TS (stlc.typeof e T)).

subst_obj_cases I (obj_openterm XS_E) (stlc.aqopen I ES) Result :-
  subst_obj_aux I (obj_openterm XS_E) ES ES',
  applymany XS_E ES' Result.

(eq _TERM (letrec (bind (fun power => body ([
    lam onat (fun n =>
    case_or_else n
      (patt_ozero) (* |-> *)
        (vbody (liftobj (obj_openterm (bind (fun x =>
          body (stlc.osucc stlc.ozero))))))
    (case_or_else n
      (patt_osucc patt_var) (* |-> *) (vbind (fun n' => vbody (
         letobj (app power n') (fun i =>
         liftobj (obj_openterm (bind (fun x =>
           body (stlc.mult x (stlc.aqopen i [x])))))))))
      (liftobj (obj_openterm (bind (fun x => body stlc.ozero))))
    )
    )], app power (osucc (osucc ozero)))))),
  typeof _TERM T, eval _TERM V) ?
>> Yes:
>> T := liftclass (cls_ctxtyp (cons stlc.onat nil) stlc.onat),
>> V := liftobj (obj_openterm (bind (fun x => body (stlc.mult x (stlc.mult x (stlc.osucc stlc.ozero)))))).

