tests : testsuite. %testsuite tests.

(* The paper departs slightly from the standard library shipped with Makam
   for presentation purposes. *)

bindmany : type -> type -> type.
body : Body -> bindmany Variable Body.
bind : (Variable -> bindmany Variable Body) -> bindmany Variable Body.

openmany : bindmany A B -> (list A -> B -> prop) -> prop.
openmany (body Body) Q :- Q [] Body.
openmany (bind F) Q :- (x:A -> openmany (F x) (fun xs => Q (x :: xs))).

assumemany : (A -> B -> prop) -> list A -> list B -> prop -> prop.
assumemany P [] [] Q :- Q.
assumemany P (X :: XS) (T :: TS) Q :- (P X T -> assumemany P XS TS Q).

applymany : bindmany A B -> list A -> B -> prop.
applymany (body B) [] B.
applymany (bind F) (X :: XS) B :- applymany (F X) XS B.

zero : type. succ : type -> type.
vector : type -> type -> type.
vnil : vector A zero.
vcons : A -> vector A N -> vector A (succ N).

vmap : [N] (A -> B -> prop) -> vector A N -> vector B N -> prop.
vmap P vnil vnil.
vmap P (vcons X XS) (vcons Y YS) :- P X Y, vmap P XS YS.

vbindmany : (Var: type) (N: type) (Body: type) -> type.
vbody : Body -> vbindmany Var zero Body.
vbind : (Var -> vbindmany Var N Body) -> vbindmany Var (succ N) Body.

vopenmany : [N] vbindmany Var N Body -> (vector Var N -> Body -> prop) -> prop.
vopenmany (vbody Body) Q :- Q vnil Body.
vopenmany (vbind F) Q :-
  (x:A -> vopenmany (F x) (fun xs => Q (vcons x xs))).

vapplymany : [N] vbindmany Var N Body -> vector Var N -> Body -> prop.
vapplymany (vbody Body) vnil Body.
vapplymany (vbind F) (vcons X XS) Body :- vapplymany (F X) XS Body.

vassumemany : [N] (A -> B -> prop) -> vector A N -> vector B N -> prop -> prop.
vassumemany P vnil vnil Q :- Q.
vassumemany P (vcons X XS) (vcons Y YS) Q :- (P X Y -> vassumemany P XS YS Q).

vsnoc : [N] vector A N -> A -> vector A (succ N) -> prop.
vsnoc vnil Y (vcons Y vnil).
vsnoc (vcons X XS) Y (vcons X XS_Y) :- vsnoc XS Y XS_Y.

structural_recursion : [B] forall A (A -> A -> prop) -> B -> B -> prop.

typenil : type. typecons : (T: type) (TS: type) -> type.
hlist : (TypeList: type) -> type.
hnil : hlist typenil. hcons : T -> hlist TS -> hlist (typecons T TS).

hmap : [TS] (P: forall A (A -> A -> prop)) (XS: hlist TS) (YS: hlist TS) -> prop.
hmap P hnil hnil.
hmap P (hcons X XS) (hcons Y YS) :- apply P X Y, hmap P XS YS.

hmap @eq (hcons 1 (hcons "foo" hnil)) YS ?
>> Yes:
>> YS := hcons 1 (hcons "foo" hnil).

%extend refl.

dyn_to_hlist : [T] list dyn -> hlist T -> prop.
dyn_to_hlist [] hnil.
dyn_to_hlist (dyn HD :: TL) (hcons HD TL') :- dyn_to_hlist TL TL'.

dyn_headargs : (Term: A) (Head: B) (Arguments: list dyn) -> prop.
dyn_headargs Term Head Arguments :- headargs Term Head Arguments.

headargs : (Term: A) (Head: B) (Arguments: hlist T) -> prop.
headargs Term Head Arguments when refl.isunif Head :-
  dyn_headargs Term Head DynList,
  dyn_to_hlist DynList HList,
  eq Arguments HList.
headargs Term Head Arguments when not(refl.isunif Head) :-
  dyn_to_hlist DynList Arguments,
  dyn_headargs Term Head DynList.
%end.

structural_recursion Rec X Y :-
  refl.headargs X Constructor Arguments,
  refl.headargs Y Constructor Arguments',
  hmap Rec Arguments Arguments'.

structural_recursion Rec X Y :-
  refl.headargs X Constructor Arguments,
  hmap Rec Arguments Arguments',
  refl.headargs Y Constructor Arguments'.

structural_recursion Rec (X : A -> B) (Y : A -> B) :-
  (x:A -> structural_recursion Rec x x ->
    structural_recursion Rec (X x) (Y x)).

generic_fold : [A'] forall A (B -> A -> B -> prop) -> B -> A' -> B -> prop.

generic_fold F Acc X Acc when refl.isconst X.

generic_fold F Acc (X : A -> B) Acc' <-
  (x:A -> (instantiate F F', F' Acc (X x) Acc')).

polyrec_foldl : forall A (B -> A -> B -> prop) -> B -> list dyn -> B -> prop.
polyrec_foldl P S nil S.
polyrec_foldl P S (cons (dyn HD) TL) S'' <-
  instantiate P P', 
  P' S HD S',
  polyrec_foldl P S' TL S''.

generic_fold F Acc X Acc' when refl.isbaseterm X <-
  refl.headargs X HD Args,
  polyrec_foldl F Acc Args Acc'.

findunif_aux : [Any VarType]
  (Var: option VarType) (Current: Any) (Var': option VarType) -> prop.
findunif_aux (some Var) _ (some Var).
findunif_aux none (Current : CurrentType) (Result: option VarType) :-
  refl.isunif Current,
  if (dyn.eq Result (some Current)) then success
  else (eq Result none).
findunif_aux (In: option B) Current Out :-
  generic_fold @findunif_aux In Current Out.
findunif : [Any VarType] (Search: Any) (Found: VarType) -> prop.
findunif Search Found :- findunif_aux none Search (some Found).

replaceunif : [VarType Any]
  (Which: VarType) (ToWhat: VarType) (Where: Any) (Result: Any) -> prop.
replaceunif Which ToWhat Where ToWhat :-
  refl.isunif Where, refl.sameunif Which Where.
replaceunif Which ToWhat Where Where :-
  refl.isunif Where, not(refl.sameunif Which Where).
replaceunif Which ToWhat Where Result :- not(refl.isunif Where),
  structural_recursion @(replaceunif Which ToWhat) Where Result.

hasunif : [VarType Any] VarType -> bool -> Any -> bool -> prop.
hasunif _ true _ true.
hasunif X false Y true :- refl.sameunif X Y.
hasunif X In Y Out :- generic_fold @(hasunif X) In Y Out.

hasunif : [VarType Any] VarType -> Any -> prop.
hasunif Var Term :- hasunif Var false Term true.

