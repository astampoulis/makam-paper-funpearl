%use "09-metaml".
tests: testsuite. %testsuite tests.

generalize : (Type: typ) (GeneralizedType: typ) -> prop.
let : term -> (term -> term) -> term.
typeof (let E F) T' :-
  typeof E T, generalize T Tgen, (x:term -> typeof x Tgen -> typeof (F x) T').

findunif (arrowmany TS T) (X: typ) ?
>> Yes:
>> X := T,
>> T := T,
>> TS := TS.

generalize T T :- not(findunif T (X: typ)).

get_types_in_environment : [A] A -> prop.
generalize T Res :-
  findunif T Var, get_types_in_environment GammaTypes,
  (x:typ -> (replaceunif Var x T (T' x), generalize (T' x) (T'' x))),
  if (hasunif Var GammaTypes) then (eq Res (T'' Var))
  else (eq Res (tforall T'')).

get_types_in_environment Assumptions :-
  refl.assume_get typeof Assumptions.

typeof (let (lam _ (fun x => let x (fun y => y))) (fun id => id)) T ?
>> Yes:
>> T := tforall (fun a => arrow a a).

(* Simulate the naive rule where we don't remove all the unification variables that appear in
   the context: *)

(get_types_in_environment [] ->
  typeof (let (lam _ (fun x => let x (fun y => y)))
            (fun z => z)) T) ?
>> Yes:
>> T := tforall (fun a => arrow a (tforall (fun b => b))).

