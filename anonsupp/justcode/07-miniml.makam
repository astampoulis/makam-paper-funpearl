%use "06-structural".
tests: testsuite. %testsuite tests.

tforall : (typ -> typ) -> typ.
lamt : (typ -> term) -> term.
appt : term -> typ -> term.
typeof (lamt E) (tforall T) :- (a:typ -> typeof (E a) (T a)).
typeof (appt E T) T' :- typeof E (tforall TF), eq T' (TF T).

typedef : (NewType: typ) (Definition: typ) -> prop.

program : type. 
main : term -> program. 
lettype : (Definition: typ) (A_Program: typ -> program) -> program.

wfprogram : program -> prop.
wfprogram (main E) :- typeof E T.
wfprogram (lettype T A_Program) :-
  (a:typ -> typedef a T -> wfprogram (A_Program a)).

datadef : type. datatype_bind : (Into: type) -> type.
datatype : (Def: datadef) (Rest: datatype_bind program) -> program.

mkdatadef : (typ -> list typ) -> datadef.
constructor : type.
bind_datatype : (typ -> bindmany constructor A) -> datatype_bind A.

constructor_typ : (DataType: typ) (C: constructor) (ArgType: typ) -> prop.

wfprogram (datatype (mkdatadef DT_ConstrArgTypes)
                    (bind_datatype DT_Constrs_Rest)) :-
  (dt:typ -> openmany (DT_Constrs_Rest dt) (pfun constrs rest =>
    assumemany (constructor_typ dt) constrs (DT_ConstrArgTypes dt)
    (wfprogram rest))).

constr : (C: constructor) (Arg: term) -> term.
patt_constr : (C: constructor) (Arg: patt N N') -> patt N N'.
typeof (constr C Arg) Datatype :-
  constructor_typ Datatype C ArgType, typeof Arg ArgType.
typeof_patt (patt_constr C Arg) Datatype S S' :-
  constructor_typ Datatype C ArgType, typeof_patt Arg ArgType S S'.

wfprogram
  (datatype
    (mkdatadef (fun llist =>
    [ product [] (* nil *) ,
      product [onat, llist] ]))
  (bind_datatype (fun llist => bind (fun cnil => bind (fun ccons => body
  (main
    (letrec
      (bind (fun append => body (
      [ lam llist (fun l1 => lam (T llist) (fun l2 =>
        case_or_else l1
          (patt_constr ccons (patt_tuple (pcons patt_var (pcons patt_var pnil))))
            (vbind (fun hd => vbind (fun tl => vbody (
            constr ccons (tuple [hd, app (app append tl) l2])))))
          l2)) ],
      (app (app append
        (constr ccons (tuple [ozero, constr cnil (tuple [])])))
        (constr ccons (tuple [ozero, constr cnil (tuple [])]))))))))))))) ?
>> Yes:
>> T := fun llist => llist.

