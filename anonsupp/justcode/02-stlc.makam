tests : testsuite. %testsuite tests.

term : type.
typ : type.

app : term -> term -> term.
arrow : typ -> typ -> typ.

lam : typ -> (term -> term) -> term.

typeof : term -> typ -> prop.

typeof (app E1 E2) T' :- typeof E1 (arrow T T'), typeof E2 T.

typeof (lam T1 E) (arrow T1 T2) :- (x:term -> typeof x T1 -> typeof (E x) T2).

typeof (lam _ (fun x => x)) T ?
>> Yes:
>> T := arrow T1 T1.

typeof (lam _ (fun x => app x x)) T' ?
>> Impossible.

tuple : list term -> term. product : list typ -> typ.
typeof (tuple ES) (product TS) :- map typeof ES TS.

typeof (lam _ (fun x => lam _ (fun y => tuple [x, y]))) T ?
>> Yes:
>> T := arrow T1 (arrow T2 (product [T1, T2])).

eval : term -> term -> prop.
eval (lam T F) (lam T F).
eval (tuple ES) (tuple VS) :- map eval ES VS.

eval (app E E') V'' :- eval E (lam _ F), eval E' V', eval (F V') V''.

